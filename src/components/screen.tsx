import { keyframes } from "@emotion/react";
import {
  Box,
  Button,
  Divider,
  Tab,
  Tabs,
  Typography,
  useTheme,
} from "@mui/material";
import { motion } from "framer-motion";
import React, { useRef, useState } from "react";
import { Column, Row } from "./layout/elements";
import cloverImg from "/clover.png";
import happyImg from "/happy.png";
import { useNavigate } from "react-router-dom";
import PortfolioImg from "../assets/img/portfolio.png";

// flyIn Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ïÏùò
const flyIn = (startX: string, startY: string) => keyframes`
  from {
    transform: translate(${startX}, ${startY});
  }
  to {
    transform: translate(0, 0);
    opacity: 1;
  }
`;

const Screen: React.FC = () => {
  const theme = useTheme();
  const [animationCompleteCount, setAnimationCompleteCount] = useState(0);
  const totalAnimations = 32;

  const handleAnimationEnd = () => {
    setAnimationCompleteCount((prevCount) => {
      const newCount = prevCount + 1;
      return newCount;
    });
  };

  const animationCompleted = animationCompleteCount >= totalAnimations * 0.8;

  const letterVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.2,
        duration: 0.5,
      },
    }),
  };
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        delay: 1, // Ïª®ÌÖåÏù¥ÎÑà Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë ÏßÄÏó∞ ÏãúÍ∞Ñ (1Ï¥à)
        delayChildren: 1, // ÏûêÏãù ÏöîÏÜå Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë ÏßÄÏó∞ ÏãúÍ∞Ñ (1Ï¥à)
        staggerChildren: 0.1,
      },
    },
  };

  const [tabValue, setTabValue] = useState(0);
  const handleTabChange = (newValue: number) => {
    setTabValue(newValue);
  };
  const HomeRef = useRef(null);
  const ResumeRef = useRef(null);
  const PortfolioRef = useRef(null);

  const scrollToSection = (sectionRef: React.RefObject<HTMLElement>) => {
    sectionRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const navigate = useNavigate();

  return (
    <Column sx={{ width: "100%", height: "100%", overflowY: "auto" }}>
      {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î */}
      <Row
        sx={{
          position: "fixed",
          left: 0,
          top: 0,
          width: "100%",
          gap: "8px",
          display: "flex",
          justifyContent: "flex-end",
          backgroundColor: theme?.palette?.background?.default,
          zIndex: 100,
          borderBottom: `2px solid ${theme?.palette?.primary?.main}`,
          "& button, & a": { fontFamily: "WantedSans-ExtraBold" },
        }}
      >
        <Button
          variant="text"
          onClick={() => {
            scrollToSection(HomeRef);
          }}
        >
          HOME
        </Button>
        <Button
          variant="text"
          onClick={() => {
            scrollToSection(ResumeRef);
          }}
        >
          RESUME
        </Button>
        <Button
          variant="text"
          onClick={() => {
            scrollToSection(PortfolioRef);
          }}
        >
          PORTFOLIO
        </Button>
        <Button
          variant="text"
          component="a"
          href="https://github.com/minalin9"
          target="_blank"
        >
          GITHUB
        </Button>
      </Row>
      {/* 1 */}
      <Column
        ref={HomeRef}
        sx={{
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          height: "100vh",
          overflow: "hidden",
          gap: "16px",
          position: "relative",
          backgroundColor: animationCompleted
            ? theme.palette.primary.main
            : "transparent",
          transition: "background-color 1s ease",
        }}
      >
        {!animationCompleted && (
          <>
            {["-100vw", "100vw", "0", "0"].map((startX, indexX) =>
              ["-100vh", "0", "100vh", "0"].map((startY, indexY) => (
                <Box
                  key={`${indexX}-${indexY}`}
                  position="absolute"
                  sx={{
                    width: 50,
                    height: 50,
                    top: "50%",
                    left: "50%",
                    transform: "translate(-50%, -50%)",
                    opacity: 0,
                    animation: `${flyIn(startX, startY)} 5s ${
                      indexX * 0.5 + indexY * 0.5
                    }s ease-in-out forwards`,
                    "& img": { width: "100%" },
                  }}
                  onAnimationEnd={handleAnimationEnd}
                >
                  <img src={happyImg} alt="happy_clover" />
                </Box>
              ))
            )}
            {["-50vw", "50vw", "-25vw", "25vw"].map((startX, indexX) =>
              ["-50vh", "25vh", "50vh", "-25vh"].map((startY, indexY) => (
                <Box
                  key={`clover-${indexX}-${indexY}`}
                  position="absolute"
                  sx={{
                    width: 50,
                    height: 50,
                    top: "50%",
                    left: "50%",
                    transform: "translate(-50%, -50%)",
                    opacity: 0,
                    animation: `${flyIn(startX, startY)} 5s ${
                      indexX * 0.5 + indexY * 0.5
                    }s ease-in-out forwards`,
                    "& img": { width: "100%" },
                  }}
                  onAnimationEnd={handleAnimationEnd}
                >
                  <img src={cloverImg} alt="clover" />
                </Box>
              ))
            )}
          </>
        )}
        {animationCompleted && (
          <Box
            display="flex"
            flexDirection="column"
            justifyContent="center"
            alignItems="center"
            width="100%"
            height="100%"
            component={motion.div}
            variants={containerVariants}
            initial="hidden"
            animate="visible"
          >
            <Typography
              variant="h3"
              fontSize="2em"
              fontFamily="WantedSans-Bold"
              sx={{ color: theme.palette?.notepad?.background?.default }}
            >
              {"üçÄ Hello, my world! üçÄ".split("").map((letter, index) => (
                <motion.span
                  key={index}
                  variants={letterVariants}
                  initial="hidden"
                  animate="visible"
                  custom={index}
                >
                  {letter === " " ? "\u00A0" : letter}
                </motion.span>
              ))}
            </Typography>

            <Typography
              variant="h3"
              fontSize="1.5em"
              fontFamily="WantedSans-SemiBold"
              sx={{ color: theme.palette?.notepad?.background?.default }}
              component={motion.span}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 5 }}
            >
              Frontend Developer
            </Typography>
          </Box>
        )}
      </Column>
      {/* 2 */}
      <Column
        ref={ResumeRef}
        justifyContent="center"
        alignContent="center"
        width="100%"
        height="100vh"
        overflow="hidden"
      >
        <Column height="100%" py={2} gap={2}>
          <Column
            justifyContent="center"
            alignItems="center"
            gap={2}
            flex={0.5}
          >
            <Typography
              variant="h3"
              fontSize="1.2em"
              fontFamily="WantedSans-SemiBold"
            >
              ‚ú® Tech Stack ‚ú®
            </Typography>
            <Row
              sx={{
                justifyContent: "center",
                alignItems: "center",
                gap: "8px",
                maxWidth: "480px",
                flexWrap: "wrap",
                "& img": {
                  width: "auto",
                  maxHeight: "20px",
                },
              }}
            >
              <img src="https://img.shields.io/badge/React-61DAFB?style=for-the-badge&logo=React&logoColor=black" />
              <img src="https://img.shields.io/badge/Vue.js-4FC08D?style=for-the-badge&logo=Vue.js&logoColor=white" />
              <img src="https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logo=javascript&logoColor=black" />
              <img src="https://img.shields.io/badge/Typescript-3178C6?style=for-the-badge&logo=Typescript&logoColor=white" />
              <img src="https://img.shields.io/badge/Next.js-000000?style=for-the-badge&logo=Next.js&logoColor=white" />
              <img src="https://img.shields.io/badge/styled components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white" />
              <img src="https://img.shields.io/badge/MUI-%230081CB.svg?style=for-the-badge&logo=mui&logoColor=white" />
              <img src="https://img.shields.io/badge/Bootstrapap-7952B3?style=for-the-badge&logo=bootstrap&logoColor=white" />
              <img src="https://img.shields.io/badge/Amazon AWS-232F3E?style=for-the-badge&logo=amazonaws&logoColor=white" />
              <img src="https://img.shields.io/badge/Heroku-430098?style=for-the-badge&logo=Heroku&logoColor=white" />
              <img src="https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&logo=html5&logoColor=white" />
              <img src="https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&logo=css3&logoColor=white" />
            </Row>
          </Column>
          {/* //Ïä§ÌÉù */}
          <Column justifyContent="center" alignItems="center" flex="auto">
            <Column
              width="100%"
              maxWidth={480}
              border={`2px solid ${theme.palette.primary.main}`}
            >
              <Row
                gap={1}
                justifyContent="flex-start"
                alignItems="center"
                borderBottom={`1px solid ${theme.palette.primary.main}`}
                py={1}
              >
                <Typography
                  variant="h2"
                  fontFamily={"WantedSans-ExtraBold"}
                  color="primary"
                  minWidth={97}
                  maxWidth={97}
                  textAlign="center"
                >
                  Í≤ΩÎ†•
                </Typography>
                <Column alignItems="flex-start">
                  <Row alignItems="center" gap={1}>
                    <Typography variant="h3">ÌïúÍ∏∏Î°úÎã§</Typography>
                    <Typography
                      sx={{
                        fontSize: "12px",
                        color: theme.palette.secondary.main,
                      }}
                    >
                      ÌîÑÎ°†Ìä∏ÏóîÎìú „Éª Í∞úÎ∞úÌåÄ ÏÇ¨Ïõê
                    </Typography>
                  </Row>
                  <Typography sx={{ color: theme.palette.primary.dark }}>
                    2020.07 ~ 2023.12(Ï¥ù 3ÎÖÑ 6Í∞úÏõî)
                  </Typography>
                </Column>
              </Row>
              <Row alignItems="flex-start">
                <Column maxWidth={100}>
                  <Tabs
                    orientation="vertical"
                    variant="scrollable"
                    value={tabValue}
                    onChange={(_, newValue) => handleTabChange(newValue)}
                  >
                    {[
                      "2023.01 - 2023.12",
                      "2022.07 - 2022.12",
                      "2020.07 - 2022.12",
                    ].map((label, index) => (
                      <Tab
                        key={label}
                        label={label}
                        sx={{
                          backgroundColor:
                            tabValue === index
                              ? theme.palette.primary.main
                              : "inherit",
                          color:
                            tabValue === index
                              ? `${theme.palette.notepad?.background?.default} !important`
                              : theme.palette.primary.light,
                          fontSize: 14,
                          fontWeight: tabValue === index ? "bold" : "normal",
                        }}
                      />
                    ))}
                  </Tabs>
                </Column>
                <Column
                  flex="auto"
                  px={2}
                  py={1}
                  borderLeft={`1px solid ${theme.palette.primary.main}`}
                >
                  <Column>
                    {tabValue === 0 && (
                      <>
                        <Typography
                          variant="h4"
                          sx={{
                            color: theme.palette.secondary.main,
                          }}
                        >
                          2023.01 - 2023.12
                        </Typography>
                        <Typography
                          variant="h3"
                          sx={{ color: theme.palette.secondary.main }}
                        >
                          ÏÇ¨Ï£ºÎ∞îÏ£º ‚û°Ô∏è ÎçîÌÅºÎßåÏÑ∏Î†• Ïõπ/Ïï± ÏÑúÎπÑÏä§ Î¶¨Îâ¥Ïñº ÌîÑÎ°úÏ†ùÌä∏
                        </Typography>
                      </>
                    )}
                    {tabValue === 1 && (
                      <>
                        <Typography
                          variant="h4"
                          sx={{
                            color: theme.palette.secondary.main,
                          }}
                        >
                          2022.07 - 2022.12
                        </Typography>
                        <Typography
                          variant="h3"
                          sx={{ color: theme.palette.secondary.main }}
                        >
                          Ïô∏Î∂Ä ÌòëÎ†•ÏÇ¨ÏôÄ Ï†ÑÌôî ÏÉÅÎã¥ ÌîÑÎ°úÍ∑∏Îû® Í∞úÎ∞ú
                        </Typography>
                      </>
                    )}
                    {tabValue === 2 && (
                      <>
                        <Typography
                          variant="h4"
                          sx={{
                            color: theme.palette.secondary.main,
                          }}
                        >
                          2020.07 - 2022.12
                        </Typography>
                        <Typography
                          variant="h3"
                          sx={{ color: theme.palette.secondary.main }}
                        >
                          ÏÇ¨Ï£ºÎ∞îÏ£º
                        </Typography>
                      </>
                    )}
                    <Divider sx={{ my: 1 }} />
                    <Column
                      minHeight={300}
                      maxHeight={300}
                      sx={{ overflowY: "auto" }}
                    >
                      {tabValue === 0 && (
                        <Typography variant="h4" color="initial">
                          - React.js Í∏∞Î∞ò ÏÇ¨Ï£ºÎ∞îÏ£º ÏõπÏÇ¨Ïù¥Ìä∏ Ï†ÑÎ©¥ Î¶¨Îâ¥Ïñº <br />-
                          Ìôà, ÏÑúÎπÑÏä§ Ï†úÍ≥µÌéòÏù¥ÏßÄ (ÎßåÏÑ∏Î†•), ÎßàÏù¥ÌéòÏù¥ÏßÄ, Í≤∞Ï†ú Í∏∞Îä•
                          UI Î∞è API Ïó∞Îèô
                          <br /> - Material-UI(MUI) ÎùºÏù¥Î∏åÎü¨Î¶¨ Í∏∞Î∞ò UI Ïª¥Ìè¨ÎÑåÌä∏
                          Í∞úÎ∞ú
                          <br /> - Chat GPT API Ïó∞ÎèôÏùÑ ÌÜµÌïú AI Í∏∞Î∞ò ÏÇ¨Ï£º Ìï¥ÏÑù
                          Í∏∞Îä• Í∞úÎ∞ú
                          <br /> „ÄÄ1) API Ïó∞Îèô
                          <br /> „ÄÄ„ÄÄOpenAI Chat GPT API ÏóîÎìúÌè¨Ïù∏Ìä∏Ïóê HTTP
                          ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Í∏∞ ÏúÑÌïú ÏΩîÎìú ÏûëÏÑ± (Axios ÏÇ¨Ïö©)
                          <br />
                          „ÄÄ2)Îç∞Ïù¥ÌÑ∞ Î∞îÏù∏Îî© <br />
                          „ÄÄ„ÄÄÏÇ¨Ïö©Ïûê ÏÉùÎÖÑÏõîÏùºÏãú Ï†ïÎ≥¥Î•º Chat GPT Î™®Îç∏Ïóê ÎßûÎäî
                          ÌòïÏãùÏúºÎ°ú Í∞ÄÍ≥µ <br />
                          „ÄÄ„ÄÄChat GPT ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Î•º ÌîÑÎ°†Ìä∏ÏóîÎìúÏóêÏÑú Ìö®Í≥ºÏ†ÅÏúºÎ°ú
                          Î†åÎçîÎßÅÌï† Ïàò ÏûàÍ≤å ÌååÏã±
                          <br />
                          „ÄÄ3) UI Í∞úÎ∞ú
                          <br /> „ÄÄ„ÄÄMUI ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º ÌôúÏö©Ìïú ÏÇ¨Ï£º Ìï¥ÏÑù Í≤∞Í≥º
                          ÏãúÍ∞ÅÌôî UI Ïª¥Ìè¨ÎÑåÌä∏ Í∞úÎ∞ú <br />
                          „ÄÄ„ÄÄÏÇ¨Ïö©Ïûê ÏûÖÎ†• Ìèº Î∞è Í≤∞Í≥º ÌôîÎ©¥ UI Íµ¨ÏÑ±
                          <br /> „ÄÄ4) ÏÉÅÌÉú Í¥ÄÎ¶¨
                          <br /> „ÄÄ„ÄÄÏÇ¨Ïö©Ïûê ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ÏôÄ Chat GPT ÏùëÎãµ Í≤∞Í≥ºÎ•º
                          React ÏÉÅÌÉúÎ°ú Í¥ÄÎ¶¨ „ÄÄ<br />
                          „ÄÄ5) Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
                          <br /> „ÄÄ„ÄÄÏÇ¨Ïö©Ïûê ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ÏôÄ Chat GPT ÏùëÎãµÏùÑ ÏÑúÎ≤Ñ
                          APIÎ°ú Ï†ÑÏÜ°ÌïòÍ∏∞ ÏúÑÌïú ÏΩîÎìú ÏûëÏÑ± <br />
                          „ÄÄ6) ÎùºÏù¥ÌîÑÏÇ¨Ïù¥ÌÅ¥ Í¥ÄÎ¶¨
                          <br /> „ÄÄ„ÄÄAPI ÏùëÎãµ ÎåÄÍ∏∞ Ï§ë UI Î†åÎçîÎßÅ ÏµúÏ†ÅÌôîÎ•º ÏúÑÌïú
                          ÎùºÏù¥ÌîÑÏÇ¨Ïù¥ÌÅ¥ ÌõÖ ÌôúÏö©
                          <br /> „ÄÄ7) ÏóêÎü¨ Ìï∏Îì§ÎßÅ
                          <br /> „ÄÄ„ÄÄAPI Ìò∏Ï∂ú ÎòêÎäî Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïã§Ìå® Ïãú ÏóêÎü¨ Ï≤òÎ¶¨
                          Î°úÏßÅ Íµ¨ÌòÑ - Google Play Store Ïï± Î∞∞Ìè¨
                          <br /> - Channel.io Ï±ÑÌåÖ ÏÜîÎ£®ÏÖò Ïó∞Îèô Î∞è Í≥†Í∞ù ÏÑúÎπÑÏä§
                          Í∏∞Îä• Íµ¨Ï∂ï
                        </Typography>
                      )}
                      {tabValue === 1 && (
                        <Typography variant="h4" color="initial">
                          - React.js Í∏∞Î∞ò ÏÉÅÎã¥ÏÇ¨/Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ Í∞úÎ∞ú
                          <br /> - Sendbird ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º ÌôúÏö©Ìïú Ï†ÑÌôî ÏÉÅÎã¥ ÏãúÏä§ÌÖú
                          Íµ¨Ï∂ï <br />- Material-UI(MUI) ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º ÌÜµÌïú
                          ÏÉÅÎã¥Ïûê/Í¥ÄÎ¶¨Ïûê UI Í∞úÎ∞ú <br />- REST API Ïó∞ÎèôÏùÑ ÌÜµÌïú
                          Îç∞Ïù¥ÌÑ∞ Î∞îÏù∏Îî©
                        </Typography>
                      )}
                      {tabValue === 2 && (
                        <Typography variant="h4" color="initial">
                          - Ï¥àÍ∏∞ HTML5, CSS, jQueryÎ•º ÌôúÏö©Ìïú ÏõπÌéòÏù¥ÏßÄ ÌçºÎ∏îÎ¶¨Ïã±
                          ÏóÖÎ¨¥ ÏàòÌñâ
                          <br />
                          - UI/UX Í∞úÏÑ†ÏùÑ ÏúÑÌïú A/B ÌÖåÏä§Ìä∏ Î∞è Î∞òÏùëÌòï Ïõπ Íµ¨ÌòÑ
                          <br />
                          - ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏù∏ UI/UX ÎîîÏûêÏù∏ Í∞úÏÑ† ÏûëÏóÖ ÏßÑÌñâ
                          <br />
                          - ÏõîÍ∞Ñ ÌôúÏÑ± ÏÇ¨Ïö©Ïûê(MAU) Ï¶ùÎåÄÎ•º ÏúÑÌïú ÏÉùÎÖÑÏõîÏùº Í∏∞Î∞ò ÏÇ¨Ï£º
                          ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÌéòÏù¥ÏßÄ Ï†úÏûë
                          <br />
                          <br />
                          ReactÎ•º ÌÜµÌïú SPA Í∞úÎ∞ú
                          <br />
                          - Styled-ComponentÎ•º ÌôúÏö©Ìïú Ïä§ÌÉÄÏùºÎßÅ ÏûëÏóÖ
                          <br />
                          - React Í∏∞Î∞ò SEO(Í≤ÄÏÉâ ÏóîÏßÑ ÏµúÏ†ÅÌôî) ÏûëÏóÖ ÏàòÌñâ
                          <br />
                          - Google Analytics(GA) Ïó∞ÎèôÏùÑ ÌÜµÌïú ÏÇ¨Ïö©Ïûê ÌôúÎèô Ìä∏ÎûòÌÇπ
                          <br />
                          <br />
                          Vue.js Í∏∞Î∞ò Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Í∞úÎ∞ú
                          <br />
                          - Ïô∏Î∂Ä Î≤§ÎçîÏÇ¨ÏôÄ ÌòëÏóÖ ÌïòÎ©∞ Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Îä•Î†• Î∞∞Ïñë
                          <br />
                          - GitÏùÑ ÌÜµÌïú Ï≤¥Í≥ÑÏ†ÅÏù∏ Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ Í≤ΩÌóò
                          <br />
                          - Vue.jsÏóêÏÑúÏùò SEO ÏµúÏ†ÅÌôî ÏûëÏóÖ
                          <br />
                          - API Ïó∞ÎèôÏùÑ ÌÜµÌïú Îç∞Ïù¥ÌÑ∞ Î∞îÏù∏Îî©
                          <br />
                        </Typography>
                      )}
                    </Column>
                  </Column>
                </Column>
              </Row>
            </Column>
          </Column>
          {/* //Í≤ΩÎ†• */}
        </Column>
      </Column>

      <Column
        ref={PortfolioRef}
        justifyContent="center"
        alignContent="center"
        width="100%"
        height="100vh"
        overflow="hidden"
      >
        <Column
          height="100%"
          gap={2}
          p={4}
          justifyContent="center"
          alignItems="center"
        >
          <Row gap={1}>
            <Column
              onClick={() => {
                navigate("/project/crochet-note");
              }}
            >
              <Button 
                sx={{
                  "& img": { width: "100%" },
                  "& img:hover": { opacity: 0.8 },
                  border: `2px solid ${theme.palette.primary.light}`,
                }}
              >
                <img src={PortfolioImg} alt="Ìè¨Ìä∏Ìè¥Î¶¨Ïò§_Ïù¥ÎØ∏ÏßÄ(1)" />
              </Button>
              <Column justifyContent="center" alignItems="center">
                <Typography
                  textAlign="center"
                  variant="h4"
                  fontFamily="WantedSans-SemiBold"
                >
                  ÎÇòÎßåÏùò Î©îÎ™®Ïû•(ÎÇòÎ™®) <br />
                  Í∞úÏù∏ Ï†úÏûë Î©îÎ™®Ïû•
                </Typography>
                <Typography variant="h5">
                  React, Typescript, vite ÏÇ¨Ïö©
                </Typography>
              </Column>
            </Column>
            <Column
              onClick={() => {
                navigate("/project/crochet-note");
              }}
            >
              <Button
                sx={{
                  "& img": { width: "100%" },
                  "& img:hover": { opacity: 0.8 },
                  border: `2px solid ${theme.palette.primary.light}`,
                }}
              >
                <img src={PortfolioImg} alt="Ìè¨Ìä∏Ìè¥Î¶¨Ïò§_Ïù¥ÎØ∏ÏßÄ(1)" />
              </Button>
              <Column justifyContent="center" alignItems="center">
                <Typography
                  textAlign="center"
                  variant="h4"
                  fontFamily="WantedSans-SemiBold"
                >
                  ÎÇòÎßåÏùò Î©îÎ™®Ïû•(ÎÇòÎ™®) <br />
                  Í∞úÏù∏ Ï†úÏûë Î©îÎ™®Ïû•
                </Typography>
                <Typography variant="h5">
                  React, Typescript, vite ÏÇ¨Ïö©
                </Typography>
              </Column>
            </Column>
            <Column
              onClick={() => {
                navigate("/project/crochet-note");
              }}
            >
              <Button
                sx={{
                  "& img": { width: "100%" },
                  "& img:hover": { opacity: 0.8 },
                  border: `2px solid ${theme.palette.primary.light}`,
                }}
              >
                <img src={PortfolioImg} alt="Ìè¨Ìä∏Ìè¥Î¶¨Ïò§_Ïù¥ÎØ∏ÏßÄ(1)" />
              </Button>
              <Column justifyContent="center" alignItems="center">
                <Typography
                  textAlign="center"
                  variant="h4"
                  fontFamily="WantedSans-SemiBold"
                >
                  ÎÇòÎßåÏùò Î©îÎ™®Ïû•(ÎÇòÎ™®) <br />
                  Í∞úÏù∏ Ï†úÏûë Î©îÎ™®Ïû•
                </Typography>
                <Typography variant="h5">
                  React, Typescript, vite ÏÇ¨Ïö©
                </Typography>
              </Column>
            </Column>
          </Row>
        </Column>
      </Column>
      {/* ÌïòÎã® */}
    </Column>
  );
};

export default Screen;
